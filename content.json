[{"title":"Linux 内核编译","date":"2017-03-25T14:57:38.000Z","path":"2017/03/25/Linux-内核编译/","text":"Linux 内核编译 从Linux内核官网上下了一个最新的版本，解压到/usr/src中 下载文件后缀为.tar.xz 解压命令为 tar -xvf filename 执行make mrproper把可能对编译新内核时产生的干扰的文件和文件夹去掉 配置内核，确定.config 对这个config的配置就是对你编译新内核的配置，不同的系统有不同的配置方法。这步可以通过把以前的 config拷贝过来，再安装。 获得当前的config有两种方法：1)从/boot/config-x这里拷贝到源文件夹中。2）通过make oldconfig建立当前配置。当然你也可以自己定制内核。定制工具有 make config(全部是文本，就是.config) make menuconfig(比较好用也直观）我选择的也是这种方法 make xconfig(GUI方式，但需要QT库支持,Kde下使用) make gconfig(GUI方式，但需要库支持，Gnome下使用) make 编译内核，需要很多时间 make modules_install 安装这些模块 最后make install 进行安装 在实验过程中遇到的问题以及解决方法： 查看当前linux版本，供下载时参考，版本过早的内核（如提供的2.6版本）在编译时可能会因为编译器问题而报错，选择最新的4.10版本进行编译 unaem -a 使用make menuconfig无法打开界面，可能是命令行窗口太小，可全屏解决；遇到curses.h缺失，下载安装图形界面配置工具ncurses tar zxvf ncurses-5.9.tar.gz cd ncurses-5.9 ./configure make make install make编译时缺失openssl/ssl.h，安装openssl安装包 CentOS: $ yum install openssl-devel Ubuntu: $ apt-get install libssl-dev dog/god说Linux 内核的编译过程还是挺有意思的，遇到的问题也不是很难。差不多百度都可以找到解决方案，重要的是编译内核的经历。","tags":[{"name":"Linux","slug":"Linux","permalink":"https://dogorgod.github.io/tags/Linux/"}]},{"title":"SSH 免密连接","date":"2017-03-24T12:06:22.000Z","path":"2017/03/24/SSH-免密连接/","text":"SSH 免密连接什么是SSH？&emsp; 简单说，SSH是一种网络协议，用于计算机之间的加密登录。如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的（所以叫 Secure Shell 啊），即使被中途截获，密码也不会泄露。&emsp; 比如在Windows端常用的有SSH工具有PuTTy,但是个人觉得界面太丑，果断还是MobaXterm好用又美观。Linux 一般自带的是OpenSSH,可以通过ssh -V 查看版本。在Andriod 端好用的有JuiceSSH。 基本的用法SSH主要用于远程登录。假定你要以用户名user，登录远程主机host，只要一条简单命令就可以了。 $ ssh user@host 如果本地用户名与远程用户名一致，登录时可以省略用户名。 $ ssh host SSH的默认端口是22，也就是说，你的登录请求会送进远程主机的22端口。使用p参数，可以修改这个端口。 $ ssh -p 2222 user@host 免密登陆目标主机 ubuntu 16.04 本地主机 Windows 在本地主机打开git shell ssh-keygen - t rsa 生成公共(id_rsa.pub) / 私有 rsa（id_rsa） 密钥对 复制公钥到目标服务器，然后就可以无密码登录了 ssh-copy-id hexo@服务器IP 这固然方便，但是网上教程中在ssh-keygen创建密钥的时候， “Enter passphrase (empty for no passphrase):” 和下一行 “Enter same passphrase again:” 两处都是直接回车，就是说没有创建口令短语（passphrase）。 使用口令短语我们把目标主机的 /root/.ssh/authorized_keys 移走，在操作主机上 重新 生成一对儿密钥，这回加上口令短语（至少5个字符），再ssh-copy-id 到目标主机，试试连接： [root@centos7-cn ~]# ssh root@192.168.150.110 Enter passphrase for key &apos;/root/.ssh/id_rsa&apos;: &lt;输入正确的口令短语&gt; Last login: Tue Oct 28 11:46:56 2014 from 192.168.150.76 [root@centos7 ~]# 必须输入正确的口令短语才能登录目标主机。 增加口令短语那么在生产环境里，已经部署了不带口令短语的密钥，怎么增加口令短语呢？这样 [root@centos7-cn ~]# ssh-keygen -p Enter file in which the key is (/root/.ssh/id_rsa): Key has comment &apos;/root/.ssh/id_rsa&apos; Enter new passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved with the new passphrase. 这时候再试试连接目标主机，除了需要输入口令短语，登录服务器依旧不需要密码。 但是仅仅增加口令短语并不能解决问题，因为改动的是操作主机上的id_rsa文件（私钥），目标主机上保存的是毫无变化的公钥，原来未加口令的私钥依然有效！！ 所以没有办法了， 增加口令没有太多实际意义 。必须删除目标主机原有的公钥（保存在目标主机的 /root/.ssh/authorized_keys），删除操作主机旧的密钥并重新生成一套带口令的，再ssh-copy-id到目标主机。这可能是个浩大的工程。。。 ssh-keygen -p 选项也可以修改口令短语，只是在输入新口令之前需要先输入旧口令。 dog/god说之前折腾了好久也没有弄清楚目标主机和本地主机的关系，仔细看了下ssh的原理终于实现了免密登陆，这下部署博客就很简单了。出现问题时，不要着急立刻解决还是去了解下背后的原理，再操作比较有效率。","tags":[{"name":"SSH","slug":"SSH","permalink":"https://dogorgod.github.io/tags/SSH/"}]},{"title":"服务器部署Hexo博客","date":"2017-03-24T10:48:25.000Z","path":"2017/03/24/服务器部署Hexo博客/","text":"服务器部署Hexo博客dog/god说最近真是沉迷博客无法自拔啊…在党员丁的“一块钱你买不到。。。”的理论感化下，入坑了腾讯云，顺便买了个.cn的域名（网站备案好繁琐啊）。言归正传，又花了两天把原来部署在github上的博客部署到服务器上，真是折腾了好久，遇到了各种谜之问题。写下安装步骤以防遗忘和以后可能的修复博客。 本地安装Hexo Windows下安装nodejs和它的包管理器npm以及git 安装Hexo npm install hexo -g 初始化hexo cd D:/blog hexo init 服务器配置创建专用的用户 添加用户 useradd -m hexo 赋予sudo权限 vim /etc/sudoers &emsp; 修改片段如下 ## Allowroot to run any comment anywhere root ALL=(ALL) ALL hexo ALL=(ALL) ALL 创建部署静态文件的Git仓库&emsp; 创建/var/repo 目录，然后修改所有权和用户权限,之后 ubuntu 用户都具备 /var/repo 目录下所有新生成的目录和文件的权限。 sudo mkdir /var/repo/ sudo chown -R $USER:$USER /var/repo/ sudo chmod -R 755 /var/repo/ &emsp; 初始化git仓库，生成.git cd /var/repo git –bare hexo_static.git 配置Apache/Nginx 托管文件目录&emsp; Apache或者Nginx都可以，因为之前用的Nginx配置的，发现明明部署成功，网页却无法显示，怀疑Nginx有问题，于是换了Apache，结果是愚蠢的我没有把服务器的80端口打开… 创建/var/www/hexo，用于托管，同时修改所有权和权限 sudo mkdir -p /var/www/hexo 配置Apache sudo apt-get install apache2 &emsp; 修改网站的默认根目录为/var/www/hexo sudo vi /etc/apache2/sites-available/000-default.conf ServerAdmin webmaster@localhost DocumentRoot /var/www/hexo #修改的地方 &emsp; 重启Apache使之生效 sudo /etc/init.d/apache2 restart 配置Nginx sudo apt-get install nginx &emsp; 修改 Nginx 的 default 设置 sudo vim /etc/nginx/sites-available/default &emsp; 将其中的 root 指令指向 /var/www/hexo 目录 root /var/www/hexo; &emsp; 重启Nginx使之生效 sudo service nginx restart 创建Git hooks&emsp; 接下来，在服务器上的裸仓库 hexo_static 创建一个钩子，在满足特定条件时将静态 HTML 文件传送到 Web 服务器的目录下，即 /var/www/hexo。在自动生成的 hooks 目录下创建一个新的钩子文件： vim /var/repo/hexo_static.git/hooks/post-receive &emsp; 在该文件中添加两行代码，指定 Git 的工作树（源代码）和 Git 目录（配置文件等）。 #!/bin/bash git --work-tree=/var/www/hexo --git-dir=/var/repo/hexo_static.git checkout -f &emsp; 保存并退出文件，并让该文件变为可执行文件。 chmod +x /var/repo/hexo_static.git/hooks/post-receive 本地Hexo创建博客及部署修改 Hexo 配置中的 URL 和默认文章版式&emsp; 修改URL 和 Deployment目录下的type等 url: http://服务器IP # Deployment ## Docs: https://hexo.io/docs/deployment.html deploy: type: git repo: hexo@服务器IP:/var/repo/hexo_static branch: master 新建博客并发布&emsp; 先需要安装一个hexo包 npm install hexo-deployer-git --save hexo n &quot;文章名&quot; hexo clean hexo g hexo d &emsp; 在部署时需要设置SSH免密登陆，我留到下一篇博客专门讲解SSH。 打开浏览器输入IP就可以查看博客了。","tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://dogorgod.github.io/tags/Hexo/"},{"name":"Server","slug":"Server","permalink":"https://dogorgod.github.io/tags/Server/"}]},{"title":"Github + Hexo 搭建博客","date":"2017-03-22T14:11:18.000Z","path":"2017/03/22/Github+Hexo搭建博客/","text":"Github + Hexo 搭建博客环境安装 git安装 nodejs安装 创建github账号登陆githuib，新建一个项目 后续可自行到设置里更改域名 配置Hexo无法安装以下插件时可以更换使用淘宝源： –registry=https://registry.npm.taobao.org在D 盘根目录下创建文件夹blog，并在此处打开git或者命令行窗口。 npm install hexo-cli -g 安装cnpm npm install -g cnpm --registry=https://registry.npm.taobao.org 安装hexo npm install hexp --save 查看hexo 版本信息 hexo -v 初始化hexo hexo init 用cnpm自动安装插件 cnpm install 测试hexo hexo g hexo s 可以通过Localhost:4000查看效果 配置Hexo主题清空缓存 hexo clean 安装主题 我安装的是原版的yilia主题 git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 按照star排序的推荐主题 &ensp; https://github.com/iissnan/hexo-theme-next &ensp; https://github.com/TryGhost/Casper &ensp; https://github.com/daleanthony/uno &ensp; https://github.com/orderedlist/modernist &ensp; https://github.com/litten/hexo-theme-yilia &ensp; https://github.com/A-limon/pacman &ensp; https://github.com/MOxFIVE/hexo-theme-yelee &ensp; https://github.com/presscustomizr/hueman 更新主题 hexo clean hexo g hexo d 完成上述步骤即可部署博客 修补yilla缺失模块 先安装hexo包 npm i hexo-generator-json-content –save 在根目录.-config.yml添加代码段 jsonContent: meta: false pages: false posts: title: true date: true path: true text: true raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: true yelee主题添加搜索框 先安装hexo包 npm install –save hexo-generator-search 在根目录.-config.yml添加代码段 search: path: search.xml field: all dog/god说&emsp;使用github和hexo搭建博客的过程本身是挺有意思的，遇到了各种各样的问题，但是过程中也熟悉了git，node.js，也锻炼了对markdown的进阶使用。博客还在熟悉中。To be continued…","tags":[{"name":"Github","slug":"Github","permalink":"https://dogorgod.github.io/tags/Github/"},{"name":"Hexo","slug":"Hexo","permalink":"https://dogorgod.github.io/tags/Hexo/"}]},{"title":"myfirststep","date":"2017-03-20T15:01:18.000Z","path":"2017/03/20/myfirststep/","text":"First Step, one more step第一篇博客还是有点激动的呢其实这是一段markdown入门小记 列表有序列表 直接在文字前加1. 2. 3. 1 2 3 无序列表 直接在文字前加-或者* 2 3 4 sqrt 要注意符号和文本间的空格 插入一个链接百度 插入图片 这是粗体这是斜体 首行缩进&ensp; 在首行输入下面代码 半方大的空白： &amp;ensp; 或者 &amp;#8194； 全方大的空白: &amp;emsp; 或者 &amp;#8195； 不断行的空白: &amp;nbsp; 或者 &amp;#160； 输入法切换到全角模式 调整字体大小&lt;small&gt;字体变小&lt;/small&gt; &lt;big&gt;字体变大&lt;big&gt; &lt;font size=4&gt;字体&lt;/font&gt; 感慨第一篇博客的发表着实不易，自从想开始写博客开始就快速入门了markdown,边学习边实践，写下了这些，但是等到真正发表却已经过去一个白天了，说到底还是创建、部署博客费了我九牛二虎之力，虽然照着教程，却不知道哪里出了问题，一直没有按照预期部署成功，就拖到了现在，下一篇博客就想写写怎么创建博客。虽然这只是小小的一步，希望也是我前进的一大步。想把我平时所学的记录下来，把想说的写在这里。总之希望能够不忘初心，积累点滴。我很菜，但是我可以努力啊！","tags":[{"name":"Markdowm","slug":"Markdowm","permalink":"https://dogorgod.github.io/tags/Markdowm/"}]}]